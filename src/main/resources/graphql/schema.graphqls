schema {
    query: Query
    mutation: Mutation
    subscription : Subscription
}

type Query {
    links(filter: LinkFilter = {}, page: Int = 0, size: Int = 10, orderBy: String = "id_asc"): Links
    link(id: ID!): Link
    users(email: String, page: Int = 0, size: Int = 10, orderBy: String = "id_asc"): [User]
    user(id: ID!): User
    votes(userId: ID, linkId: ID, page: Int = 0, size: Int = 10, orderBy: String = "id_asc"): [Vote]
    vote(id: ID!): Vote
}

type Mutation {
    createUser(name: String!, email: String!, password: String!): User
    deleteUset(id: ID!): Boolean
    createUserAuth(name: String!, authData: AuthData!): User
    signUp(name: String!, email: String!, password: String!): SigninPayload
    signIn(auth: AuthData): SigninPayload
    login(email: String!, password: String!): SigninPayload
    createLink(url: String!, description: String!): Link
    deleteLink(id: ID!): Boolean
    createVote(linkId: ID!, userId: ID!): Vote
    vote(linkId: ID!): Vote
    deleteVote(id: ID!): Boolean
}

type Subscription {
    newLink: Link!
}

type Link implements Obj {
    id: ID!,
    createdAt: DateTime!
    url: String!
    description: String
    postedBy: User
    votes: [Vote]
}

type User implements Obj {
    id: ID!
    createdAt: DateTime!
    name: String!
    email: String
    password: String
}

input AuthData {
    email: String!
    password: String!
}

type SigninPayload {
    token: Long
    user: User
}

type Vote implements Obj {
    id: ID!
    createdAt: DateTime!
    user: User!
    link: Link!
}

scalar DateTime

input LinkFilter {
    description_contains: String
    url_contains: String
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

type Links {
    items: [Link!]!
    pageInfo: PageInfo!
}

interface Obj {
    id: ID!,
    createdAt: DateTime!
}
