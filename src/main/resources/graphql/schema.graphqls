schema {
    query: Query
    mutation: Mutation
}

type Query {
    allLinks: [Link]
    link(id: ID!): Link
    linksByUrl(url: String!): [Link]
    allUsers: [User]
    user(id: ID!): User
    usersByEmail(email: String!): [User]
    allVotes: [Vote]
    vote(id: ID!): Vote
    votesByUser(userId: ID!): [Vote]
    votesByLink(linkId: ID!): [Vote]
    voteByUserAndLink(userId: ID!, linkId: ID!): Vote
}

type Mutation {
    createUser(name: String!, email: String!, password: String!): User
    createUserAuth(name: String!, authData: AuthData!): User
    signinUser(auth: AuthData): SigninPayload
    createLink(url: String!, description: String!): Link
    createVote(linkId: ID!, userId: ID!): Vote
}

type Link {
    id: ID!
    url: String!
    description: String
    postedBy: User
}

type User {
    id: ID!
    name: String!
    email: String
    password: String
}

input AuthData {
    email: String!
    password: String!
}

type SigninPayload {
    token: Long
    user: User
}

type Vote {
    id: ID!
    createdAt: DateTime!
    user: User!
    link: Link!
}

scalar DateTime
